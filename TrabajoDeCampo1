Problema 01:
Clase Usuario:
public class Usuario {
    private String nombre;
    private int edad;
    private String ciudad;

    public Usuario(String nombre, int edad, String ciudad) {
        this.nombre = nombre;
        this.edad = edad;
        this.ciudad = ciudad;
    }

    public String getNombre() {
        return nombre;
    }

    public int getEdad() {
        return edad;
    }

    public String getCiudad() {
        return ciudad;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public void setEdad(int edad) {
        this.edad = edad;
    }

    public void setCiudad(String ciudad) {
        this.ciudad = ciudad;
    }
}


Clase ControladorUsuarios:

import java.util.ArrayList;

public class ControladorUsuarios {

    public static double calcularPromedioEdad(ArrayList<Usuario> usuarios) {
        if (usuarios.isEmpty()) return 0;  // Evita división entre cero
        int suma = 0;
        for (Usuario u : usuarios) {
            suma += u.getEdad();
        }
        return (double) suma / usuarios.size();
    }

    public static Usuario buscarUsuario(ArrayList<Usuario> usuarios, String nombre) {
        for (Usuario u : usuarios) {
            if (u.getNombre().equalsIgnoreCase(nombre)) {
                return u;  // Devuelve el usuario si encuentra coincidencia
            }
        }
        return null; // Si no se encuentra, devuelve null
    }

    public static ArrayList<Usuario> buscarUsuarioPorCiudad(ArrayList<Usuario> usuarios, String ciudad) {
        ArrayList<Usuario> encontrados = new ArrayList<>();
        for (Usuario u : usuarios) {
            if (u.getCiudad().equalsIgnoreCase(ciudad)) {
                encontrados.add(u);
            }
        }
        return encontrados;
    }

    public static class MensajeDecorado {
        public static void mostrar(String mensaje) {
            System.out.println("========== " + mensaje + " ==========");
        }
    }
}


Clase Main RegistroUsuarios:

import java.util.ArrayList;
import java.util.Scanner;
import java.util.Random;

public class RegistroUsuarios {
    public static void main(String[] args) {
        ArrayList<Usuario> usuarios = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);
        String opcion;

        do {
            try {
                System.out.print("Ingrese nombre: ");
                String nombre = scanner.nextLine();

                System.out.print("Ingrese edad: ");
                int edad = Integer.parseInt(scanner.nextLine()); 
                if (edad <= 0) throw new NumberFormatException("Edad no válida");

                System.out.print("Ingrese ciudad: ");
                String ciudad = scanner.nextLine();

                usuarios.add(new Usuario(nombre, edad, ciudad));

            } catch (NumberFormatException e) {
                System.out.println("Edad no válida. Intente nuevamente.");
            }

            System.out.print("¿Desea ingresar otro usuario? (s/n): ");
            opcion = scanner.nextLine();

        } while (opcion.equalsIgnoreCase("s"));

        ControladorUsuarios.MensajeDecorado.mostrar("Resumen de Usuarios");

        System.out.println("Total de usuarios: " + usuarios.size());

        System.out.printf("Promedio de edad: %.2f\n", ControladorUsuarios.calcularPromedioEdad(usuarios));

        String nombreMasLargo = "";
        for (Usuario u : usuarios) {
            if (u.getNombre().length() > nombreMasLargo.length()) {
                nombreMasLargo = u.getNombre();
            }
        }
        System.out.println("Nombre más largo: " + nombreMasLargo);

        if (!usuarios.isEmpty()) {
            Random rand = new Random();
            Usuario destacado = usuarios.get(rand.nextInt(usuarios.size()));
            System.out.println("Usuario destacado: " + destacado.getNombre() + " de " + destacado.getCiudad());
        }
    }
}


Problema 2:

Clase Figura:
public abstract class Figura {
    public abstract double calcularArea();
}

Clase Circulo:
public class Circulo extends Figura {
    private double radio;

    public Circulo(double radio) {
        this.radio = radio;
    }

    @Override
    public double calcularArea() {
        return Math.PI * radio * radio;
    }

    @Override
    public String toString() {
        return "Círculo - Radio: " + radio + ", Área: " + calcularArea();
    }
}

Clase Rectangulo:
public class Rectangulo extends Figura {
    private double base;
    private double altura;

    public Rectangulo(double base, double altura) {
        this.base = base;
        this.altura = altura;
    }

    @Override
    public double calcularArea() {
        return base * altura;
    }

    @Override
    public String toString() {
        return "Rectángulo - Base: " + base + ", Altura: " + altura + ", Área: " + calcularArea();
    }
}

Clase Triangulo:
package Problema2;

public class Triangulo extends Figura {
    private double base;
    private double altura;

    public Triangulo(double base, double altura) {
        this.base = base;
        this.altura = altura;
    }

    @Override
    public double calcularArea() {
        return (base * altura) / 2;
    }

    @Override
    public String toString() {
        return "Triángulo - Base: " + base + ", Altura: " + altura + ", Área: " + calcularArea();
    }
}

Clase Main CalculadoraFiguras:
package Problema2;

import java.util.ArrayList;
import java.util.Scanner;

public class CalculadoraFiguras {

    static ArrayList<Figura> historial = new ArrayList<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int opcion;

        do {
            Decorador.linea();
            System.out.println("CALCULADORA DE FIGURAS GEOMETRICAS");
            Decorador.linea();
            System.out.println("1. Calcular area de Circulo");
            System.out.println("2. Calcular area de Rectangulo");
            System.out.println("3. Calcular area de Triangulo");
            System.out.println("4. Ver historial");
            System.out.println("5. Ver estadisticas");
            System.out.println("0. Salir");
            System.out.print("Elija una opcion: ");

            try {
                opcion = Integer.parseInt(scanner.nextLine());

                switch (opcion) {
                    case 1 -> calcularCirculo(scanner);
                    case 2 -> calcularRectangulo(scanner);
                    case 3 -> calcularTriangulo(scanner);
                    case 4 -> mostrarHistorial();
                    case 5 -> mostrarEstadisticas();
                    case 0 -> System.out.println("Saliendo del programa...");
                    default -> System.out.println("Opcion invalida. Intente otra vez.");
                }

            } catch (NumberFormatException e) {
                System.out.println("Entrada no valida. Intente nuevamente.");
                opcion = -1;
            }

        } while (opcion != 0);
    }

    public static void calcularCirculo(Scanner sc) {
        try {
            System.out.print("Ingrese el radio del circulo: ");
            double radio = Double.parseDouble(sc.nextLine());

            if (radio < 0) throw new IllegalArgumentException("El radio no puede ser negativo");

            Figura f = new Circulo(radio);
            historial.add(f);
            System.out.println("Area calculada: " + f.calcularArea());

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    public static void calcularRectangulo(Scanner sc) {
        try {
            System.out.print("Ingrese la base del rectangulo: ");
            double base = Double.parseDouble(sc.nextLine());
            System.out.print("Ingrese la altura del rectangulo: ");
            double altura = Double.parseDouble(sc.nextLine());

            if (base < 0 || altura < 0) throw new IllegalArgumentException("Los valores no pueden ser negativos");

            Figura f = new Rectangulo(base, altura);
            historial.add(f);
            System.out.println("Area calculada: " + f.calcularArea());

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    public static void calcularTriangulo(Scanner sc) {
        try {
            System.out.print("Ingrese la base del triangulo: ");
            double base = Double.parseDouble(sc.nextLine());
            System.out.print("Ingrese la altura del triangulo: ");
            double altura = Double.parseDouble(sc.nextLine());

            if (base < 0 || altura < 0) throw new IllegalArgumentException("Los valores no pueden ser negativos");

            Figura f = new Triangulo(base, altura);
            historial.add(f);
            System.out.println("Area calculada: " + f.calcularArea());

        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    public static void mostrarHistorial() {
        if (historial.isEmpty()) {
            System.out.println("No hay figuras en el historial.");
        } else {
            Decorador.cabecera("HISTORIAL DE FIGURAS CALCULADAS");
            for (Figura f : historial) {
                System.out.println(f);
            }
        }
    }

    public static void mostrarEstadisticas() {
        if (historial.isEmpty()) {
            System.out.println("No hay datos para mostrar estadisticas.");
            return;
        }

        double sumaAreas = 0;
        for (Figura f : historial) {
            sumaAreas += f.calcularArea();
        }

        double promedio = sumaAreas / historial.size();

        Decorador.cabecera("ESTADISTICAS GENERALES");
        System.out.println("Total de figuras: " + historial.size());
        System.out.printf("Promedio de areas: %.2f\n", promedio);
    }

    public static class Decorador {
        public static void linea() {
            System.out.println("======================================");
        }

        public static void cabecera(String titulo) {
            linea();
            System.out.println(titulo);
            linea();
        }
    }
}


 
